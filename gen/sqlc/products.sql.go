// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id, user_id, name, price, identifier, color) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, name, price, identifier, color, created_at, updated_at
`

type CreateProductParams struct {
	ID         string
	UserID     sql.NullString
	Name       string
	Price      string
	Identifier sql.NullString
	Color      sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Price,
		arg.Identifier,
		arg.Color,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Identifier,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products WHERE id = $1 RETURNING id, user_id, name, price, identifier, color, created_at, updated_at
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Identifier,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, user_id, name, price, identifier, color, created_at, updated_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Price,
			&i.Identifier,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, user_id, name, price, identifier, color, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Identifier,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsByIDsAndColor = `-- name: GetProductsByIDsAndColor :many
SELECT id, user_id, name, price, identifier, color, created_at, updated_at FROM products
WHERE (COALESCE(NULLIF($1, '')::text[], ARRAY[]::text[]) = ARRAY[]::text[] OR id = ANY($1::text[]))
AND (color = COALESCE($2, color))
`

type GetProductsByIDsAndColorParams struct {
	Column1 interface{}
	Color   sql.NullString
}

func (q *Queries) GetProductsByIDsAndColor(ctx context.Context, arg GetProductsByIDsAndColorParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByIDsAndColor, arg.Column1, arg.Color)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Price,
			&i.Identifier,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByUserIDAndColor = `-- name: GetProductsByUserIDAndColor :many
SELECT id, user_id, name, price, identifier, color, created_at, updated_at FROM products
WHERE (user_id = COALESCE($1, user_id))
AND (color = COALESCE($2, color))
AND (name =  COALESCE(NULLIF($3, ''), name))
`

type GetProductsByUserIDAndColorParams struct {
	UserID  sql.NullString
	Color   sql.NullString
	Column3 interface{}
}

func (q *Queries) GetProductsByUserIDAndColor(ctx context.Context, arg GetProductsByUserIDAndColorParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByUserIDAndColor, arg.UserID, arg.Color, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Price,
			&i.Identifier,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET user_id = $2, name = $3, price = $4 WHERE id = $1 RETURNING id, user_id, name, price, identifier, color, created_at, updated_at
`

type UpdateProductParams struct {
	ID     string
	UserID sql.NullString
	Name   string
	Price  string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Identifier,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
