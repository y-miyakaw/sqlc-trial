// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createCompanyWithoutReturning = `-- name: CreateCompanyWithoutReturning :exec
INSERT INTO company (name, address, person)
VALUES ($1, $2, $3)
`

type CreateCompanyWithoutReturningParams struct {
	Name    string
	Address sql.NullString
	Person  sql.NullString
}

func (q *Queries) CreateCompanyWithoutReturning(ctx context.Context, arg CreateCompanyWithoutReturningParams) error {
	_, err := q.db.ExecContext(ctx, createCompanyWithoutReturning, arg.Name, arg.Address, arg.Person)
	return err
}

const createProductWithReturning = `-- name: CreateProductWithReturning :one
INSERT INTO products (name, price, company_id)
VALUES ($1, $2, $3)
RETURNING id, name, price, company_id, created_at, updated_at
`

type CreateProductWithReturningParams struct {
	Name      sql.NullString
	Price     sql.NullInt32
	CompanyID sql.NullInt32
}

func (q *Queries) CreateProductWithReturning(ctx context.Context, arg CreateProductWithReturningParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProductWithReturning, arg.Name, arg.Price, arg.CompanyID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProductWithoutReturning = `-- name: CreateProductWithoutReturning :exec
INSERT INTO products (name, price, company_id)
VALUES ($1, $2, $3)
`

type CreateProductWithoutReturningParams struct {
	Name      sql.NullString
	Price     sql.NullInt32
	CompanyID sql.NullInt32
}

func (q *Queries) CreateProductWithoutReturning(ctx context.Context, arg CreateProductWithoutReturningParams) error {
	_, err := q.db.ExecContext(ctx, createProductWithoutReturning, arg.Name, arg.Price, arg.CompanyID)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE
FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllCompanies = `-- name: GetAllCompanies :many
SELECT id, name, address, person, created_at, updated_at
FROM company
`

func (q *Queries) GetAllCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Person,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, company_id, created_at, updated_at
FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, price, company_id, created_at, updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductsAndCompanyByCompanyID = `-- name: GetProductsAndCompanyByCompanyID :many
SELECT products.id, products.name, price, company_id, products.created_at, products.updated_at, company.id, company.name, address, person, company.created_at, company.updated_at
FROM products
JOIN company ON company.id = products.company_id
WHERE company.id = $1
`

type GetProductsAndCompanyByCompanyIDRow struct {
	ID          int32
	Name        sql.NullString
	Price       sql.NullInt32
	CompanyID   sql.NullInt32
	CreatedAt   time.Time
	UpdatedAt   time.Time
	ID_2        int32
	Name_2      string
	Address     sql.NullString
	Person      sql.NullString
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) GetProductsAndCompanyByCompanyID(ctx context.Context, id int32) ([]GetProductsAndCompanyByCompanyIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductsAndCompanyByCompanyID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsAndCompanyByCompanyIDRow
	for rows.Next() {
		var i GetProductsAndCompanyByCompanyIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.Address,
			&i.Person,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByNameOrPriceOrCompanyID = `-- name: GetProductsByNameOrPriceOrCompanyID :many
SELECT id, name, price, company_id, created_at, updated_at
FROM products
WHERE 1=1
AND (
    CASE
        WHEN $1::text IS NULL THEN TRUE
        ELSE name = $1
    END
)
AND (
    CASE
        WHEN $2::integer IS NULL THEN TRUE
        ELSE price = $2
    END
)
AND (
    CASE
        WHEN $3::integer IS NULL THEN TRUE
        ELSE name = $3
    END
)
`

type GetProductsByNameOrPriceOrCompanyIDParams struct {
	Name      sql.NullString
	Price     sql.NullInt32
	CompanyID sql.NullInt32
}

func (q *Queries) GetProductsByNameOrPriceOrCompanyID(ctx context.Context, arg GetProductsByNameOrPriceOrCompanyIDParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByNameOrPriceOrCompanyID, arg.Name, arg.Price, arg.CompanyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
    name = $1,
    price = $2,
    company_id = $3
WHERE id = $4
`

type UpdateProductParams struct {
	Name      sql.NullString
	Price     sql.NullInt32
	CompanyID sql.NullInt32
	ID        int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.CompanyID,
		arg.ID,
	)
	return err
}
